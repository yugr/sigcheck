= What is this? =

Signal Checker is a small proof-of-concept tool for detecting
unsafe signal handlers.

The tool works by preloading a DSO (libsigcheck.so) to a process.
The DSO intercepts all (!) libc functions. The interceptors check
whether they run in unsafe context.

The tool is rather hacky but it was able to detect potential errors
in popular programs (zip, aspell).

= Why should I care about signal safety? =

Check lcamtuf's "Delivering Signals for Fun and Profit"
(available e.g. here: http://lcamtuf.coredump.cx/signals.txt).
Basically unsafe signal handlers may be used to exploit enclosing process.
This is particularly dangerous on Linux, where ordinary user can send signal
to setuid process.

= What are current results? =

Quite interesting: I saw unsafe behavior in archivers (tar, bzip2, zip, etc.),
Texinfo, aspell, make, calendar, gpg and gdb (see scripts/examples for details).

= Usage =

Preload the tool into your app and send it a signal.
The latter can be automated by setting SIGCHECK_FORK_TESTS
environment variable to non-zero value.

Other influential environment variables:
* SIGCHECK_VERBOSE       - print debug info
* SIGCHECK_MAX_ERRORS    - limit number of reported errors
* SIGCHECK_OUTPUT_FILENO - output file descriptor (TODO: make this a filename?)

For some examples, see scripts/examples.

= Build =

To build the tool, simply run ./build.sh from project top directory.

= Test =

To test the tool, simply run scripts/runtests.sh from project top directory.

= TODO =

Various TODOs are scattered all over the codebase.

One big thing is running complete distribution with this
(by putting libsigcheck.so to /etc/ld.so.preload).

There is also a big question about design (basically whether all this should be rewritten
to use uprobes).

